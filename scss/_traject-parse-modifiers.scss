@mixin parseModifiers($childrenObj, $breakPoint, $modifiers) {

  @each $modifier in $modifiers {

    $parsedModifierName: str-replace($modifier, $search:'(', $replace: ' ');
    $parsedModifierName: str-replace($parsedModifierName, $search:':', $replace: ' ');
    $parsedModifierName: str-split($parsedModifierName, ' ');
    $parsedModifierName: unquote(nth($parsedModifierName, 1));
    $selector: false;

    $parsedTarget: false;
    @each $name, $char in $modifier {
      @if (str-index($name, ':')) {
        $parsedTarget: str-split($modifier, ':');
        $parsedTarget: unquote(nth($parsedTarget, 2));
      }
    }

    $modifierHasArguments: false;
    @each $name, $char in $modifier {
      @if (str-index($name, '(')) {
        $modifierHasArguments: true;
      }
    }

    $parsedArguments: null;
    @if ($modifierHasArguments) {
      $parsedArguments: str-replace($modifier, $search:'(', $replace: '`');
      $parsedArguments: str-replace($parsedArguments, $search:')', $replace: '`');
      $parsedArguments: str-split($parsedArguments, '`');
      $parsedArguments: unquote(nth($parsedArguments, 2));
      $parsedArguments: str-split($parsedArguments, ' ');
    } 

    @if ($parsedTarget) {
      $selector: map-get($childrenObj, $parsedTarget);
    }

    // flexBox
    @if ($parsedModifierName == _flex) {
      $flow: unquote(nth($parsedArguments, 1));
      $align: unquote(nth($parsedArguments, 2));
      $justify: unquote(nth($parsedArguments, 3));

      @if ($breakPoint == 'default') {
        #{$selector} {
          @include trajectFlexBox($flow, $align, $justify);
        }
      } @else {
        @include media('screen', '#{$breakPoint}') {
          @include trajectFlexBox($flow, $align, $justify);
        }
      }
    }

    // hide
    @if ($parsedModifierName == _hide) {
      @if ($breakPoint == 'default') {
        #{$selector} {
          display: none;
        }
      } @else {
        @include media('screen', '#{$breakPoint}') {
          #{$selector} {
            display: none;
          }
        }
      }
    }
    // show
    @if ($parsedModifierName == _show) {
      @if ($breakPoint == 'default') {
        #{$selector} {
          display: block;
          display: initial;

        }
      } @else {
          @include media('screen', '#{$breakPoint}') {
          #{$selector} {
            display: block;
            display: initial;
          }
        }
      }
    }

    // grid template rows
    @if ($parsedModifierName == _templateRows) {
      @if ($breakPoint == 'default') {
        grid-template-rows: $parsedArguments;
        -ms-grid-rows: $parsedArguments !important;
      } @else {
          @include media('screen', '#{$breakPoint}') {
            grid-template-rows: $parsedArguments;
            -ms-grid-rows: $parsedArguments !important;
        }
      }
    }

    // grid template columns
    @if ($parsedModifierName == _templateColumns) {
      @if ($breakPoint == 'default') {
        grid-template-columns: $parsedArguments;
        -ms-grid-columns: $parsedArguments !important;
      } @else {
          @include media('screen', '#{$breakPoint}') {
            grid-template-columns: $parsedArguments;
            -ms-grid-columns: $parsedArguments !important;
        }
      }
    }
  }
}