@mixin parseIE($childrenObj, $gridTemplate, $breakPoint, $preventDefaultDuplicates, $preventBpDuplicates) {
  display:-ms-grid;

  //convert grid template to map:
  $masterColumnCount: null;
  $templateMaster: ();
  $i: 1;
  @each $row in $gridTemplate {
    $row: str-replace($row, $search:',', $replace: '');
    $row: str-replace($row, $search:'"', $replace: '');
    $row: str-replace($row, $search:')', $replace: '');
    $row: str-replace($row, $search:'(', $replace: '');

    $rowArr: str-split(unquote($row), ' ');
    $masterColumnCount: length($rowArr);
    $templateMaster: map-merge($templateMaster, (#{$i}: $rowArr));
    $i: $i + 1;
  }

  $masterRowCount: length($templateMaster);
  $masterColumnCount: $masterColumnCount;
  // loop over children
  @each $child, $selector in $childrenObj {
    $origin-row: null;
    $origin-column: null;
    $span-x: null;
    $span-y: null;
    $coordinates: null;
    // loop over rows
    @each $rowNumber, $row in $templateMaster {
      // loop over columns
      $columnNumber: 1;
      @each $column in $row {
        // get coordinates
        @if ($column == $child) {
          $joinedCoordinates: to-number("#{$rowNumber}.#{$columnNumber}");
          @if ($coordinates == null) {
            $coordinates: $joinedCoordinates;
          } @else {
            $coordinates: join($coordinates, $joinedCoordinates);
          }
        }
        $columnNumber: $columnNumber + 1;
      }
    }

    // calculate spans
    $row-span: null;
    $column-span: null;
    @if ($coordinates != null ) {
      @each $point in $coordinates {
        // this assumes 1 digit coordinates
        // add decimal delimeter
        $extractedRowColumn: str-split(quote($point), '.');

        $extractedRow: nth($extractedRowColumn, 1);
        $extractedRow: to-number($extractedRow);

        $extractedColumn: nth($extractedRowColumn, 2);
        $extractedColumn: to-number($extractedColumn);

        @if ($row-span == null) {
          $row-span: $extractedRow;
        }
        @else {
          $row-span: join($row-span, $extractedRow);
        }
        @if ($column-span == null) {
          $column-span: $extractedColumn;
        }
        @else {
          $column-span: join($column-span, $extractedColumn);
        }
      }

      $row-span: max($row-span...) - min($row-span...) + 1;
      $column-span: max($column-span...) - min($column-span...) + 1;


      $originCoordinate: quote(min($coordinates...));
      $gridRowColumn: str-split(unquote($originCoordinate), '.');

      $gridRow: nth($gridRowColumn, 1);
      $gridRow: to-number($gridRow);

      $gridColumn: nth($gridRowColumn, 2);
      $gridColumn: to-number($gridColumn);

    //calculate ms-grid-columns
    $msGridRows: unquote(str-repeat("1fr ", $masterRowCount));
    $msGridColumns: unquote(str-repeat("1fr ", $masterColumnCount));


    @if ($breakPoint == 'default') {
      @if ($preventDefaultDuplicates == 0){
        -ms-grid-columns: $msGridColumns;
        -ms-grid-rows: $msGridRows;
        $preventDefaultDuplicates: 1;
      }
      } @else {
      @if ($preventBpDuplicates == 0) {
        @include media('screen', '#{$breakPoint}') {
          -ms-grid-columns: $msGridColumns;
          -ms-grid-rows: $msGridRows;
          $preventDefaultDuplicates: 1;
          }
        }
      }

      #{$selector} {
        @if ($breakPoint == 'default') {
          -ms-grid-row: $gridRow;
          -ms-grid-column: $gridColumn;
          -ms-grid-row-span: $row-span;
          -ms-grid-column-span: $column-span;
        } @else {
          @include media('screen', '#{$breakPoint}') {
            -ms-grid-row: $gridRow;
            -ms-grid-column: $gridColumn;
            -ms-grid-row-span: $row-span;
            -ms-grid-column-span: $column-span;
          }
        }

      }
    }
  }
}
